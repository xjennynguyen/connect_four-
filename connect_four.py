# -*- coding: utf-8 -*-
"""connect_four.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1khvzF7zB_e6IboibWUdnVBov-rsMn-Uf
"""

# Jenny Nguyen
# CSC315 Project 1

# Step 1: Initialize the 6x7 board
board = []  # This is our empty list for the board
for row in range(6):  # This is how to make 6 rows
    row_list = []
    for col in range(7):  # This is how to make 7 columns
        row_list.append(".")
    board.append(row_list)

# x goes first
player = "x"

# Creating a function to check the winning conditions for simplicity
def check_win(board, player):
    #WINNING HORIZONTAL
    for row in range(6):  # The outer loop to loop through all 6 rows
        for col in range(4):  # This will check up to column index 3
            if (board[row][col] == board[row][col+1] ==
                board[row][col+2] == board[row][col+3] == player):
                #capitalize winning stones
                board[row][col] = player.upper()
                board[row][col+1] = player.upper()
                board[row][col+2] = player.upper()
                board[row][col+3] = player.upper()


                return True

    #WINNING VERTICAL
    for row in range(3):  # Only check up to row 3 for vertical (0-indexed)
        for col in range(7):  # Check all columns
            if (board[row][col] == board[row+1][col] ==
                board[row+2][col] == board[row+3][col] == player):
                #capitalize winning stones
                board[row][col] = player.upper()
                board[row+1][col] = player.upper()
                board[row+2][col] = player.upper()
                board[row+3][col] = player.upper()


                return True

    #CHECK DIAGONAL (TOP LEFT TO BOTTOM RIGHT)
    for row in range(3):  # Check from row 0 to row 2
        for col in range(4):  # Check from column 0 to column 3
            if (board[row][col] == board[row+1][col+1] ==
                board[row+2][col+2] == board[row+3][col+3] == player):
                #capitalize winning stones
                board[row][col] = player.upper()
                board[row+1][col+1] = player.upper()
                board[row+2][col+2] = player.upper()
                board[row+3][col+3] = player.upper()


                return True

    #CHECK DIAGONAL (TOP RIGHT TO BOTTOM LEFT)
    for row in range(3):  # Check from row 0 to row 2
        for col in range(3, 7):  # Check from column 3 to column 6
            if (board[row][col] == board[row+1][col-1] ==
                board[row+2][col-2] == board[row+3][col-3] == player):
                #capitalize winning stones
                board[row][col] = player.upper()
                board[row+1][col-1] = player.upper()
                board[row+2][col-2] = player.upper()
                board[row+3][col-3] = player.upper()
                return True



    return False

#function to check for a draw
def is_drawn(board):
    for row in board:
        for dot in row:
            if dot == ".":  # If there's any empty space, it's not a draw
                return False
    return True  # If no empty space, it's a draw

#this is the start of the main loop game
play_again = 'y'
while play_again.lower() == 'y':
    #reset the board for a new game
    board = []
    for row in range(6):
        row_list = []
        for col in range(7):
            row_list.append(".")
        board.append(row_list)

    player = "x"  #reset player to x for new game
    game_over = False

    while not game_over:
        #print current board state
        for row in board:
            for dot in row:
                print(dot, end=" ")
            print()
        #print column numbers
        for i in range(1, 8):
            print(i, end=" ")
        print()

        # this will print x or o to play
        print(f"{player.upper()} to play")

        # need to check the conditinos for choosing a column
        while True:
            column = input("which column 1-7: ")
            if not column.isdigit() or int(column) < 1 or int(column) > 7:
                print("Error, must enter an integer from 1 to 7")
                continue

            column = int(column) - 1  #turning into 0 based

            #checks if the column is full
            if board[0][column] != ".":
                continue

            #this will drop the stone to the most bottom
            for row in range(5, -1, -1):
                if board[row][column] == ".":
                    board[row][column] = player
                    break
            break

        #calling back functions to see if you win or not
        if check_win(board, player):
            #print final board state
            for row in board:
                for dot in row:
                    print(dot, end=" ")
                print()
            #print column numbers
            for i in range(1, 8):
                print(i, end=" ")
            print()
            print("CONNECT FOUR")
            print(f"{player.upper()} WINS!")
            game_over = True

        # this will check if you draw or not
        elif is_drawn(board):
            #print final board state
            for row in board:
                for dot in row:
                    print(dot, end=" ")
                print()
            #print column numbers for the one on the bottom
            for i in range(1, 8):
                print(i, end=" ")
            print()
            print("DRAW")
            game_over = True

        #alternate between players
        if not game_over:
            if player == "x":
                player = "o"
            else:
                player = "x"

    #ask to play again the last requirement
    play_again = input("Play Again? y/n: ")

    while play_again.lower() not in ['y', 'n']:
        play_again = input("please enter y or n: ")

    if play_again.lower() == 'n':
        print("Goodbye!")
        exit()